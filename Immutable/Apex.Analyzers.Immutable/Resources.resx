<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="IMM001Description" xml:space="preserve">
    <value>Fields in an immutable type must be readonly</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="IMM001MessageFormat" xml:space="preserve">
    <value>Field '{0}' is not declared as readonly</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="IMM001Title" xml:space="preserve">
    <value>Fields in an immutable type must be readonly</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="IMM002Description" xml:space="preserve">
    <value>Auto properties in an immutable type must not define a set method</value>
  </data>
  <data name="IMM002MessageFormat" xml:space="preserve">
    <value>Property '{0}' defines a set method</value>
  </data>
  <data name="IMM002Title" xml:space="preserve">
    <value>Auto properties in an immutable type must not define a set method</value>
  </data>
  <data name="IMM003Description" xml:space="preserve">
    <value>Types of fields in an immutable type must be immutable</value>
  </data>
  <data name="IMM003MessageFormat" xml:space="preserve">
    <value>Type of field '{0}' is not immutable</value>
  </data>
  <data name="IMM003MessageFormatGeneric" xml:space="preserve">
    <value>Type of field '{0}' is not immutable because type argument '{1}' is not immutable</value>
  </data>
  <data name="IMM003Title" xml:space="preserve">
    <value>Types of fields in an immutable type must be immutable</value>
  </data>
  <data name="IMM004Description" xml:space="preserve">
    <value>Types of auto properties in an immutable type must be immutable</value>
  </data>
  <data name="IMM004MessageFormat" xml:space="preserve">
    <value>Type of auto property '{0}' is not immutable</value>
  </data>
  <data name="IMM004MessageFormatGeneric" xml:space="preserve">
    <value>Type of auto property '{0}' is not immutable because type argument '{1}' is not immutable</value>
  </data>
  <data name="IMM004Title" xml:space="preserve">
    <value>Types of auto properties in an immutable type must be immutable</value>
  </data>
  <data name="IMM005Description" xml:space="preserve">
    <value>'This' should not be passed out of the constructor of an immutable type</value>
  </data>
  <data name="IMM005MessageFormat" xml:space="preserve">
    <value>Possibly incorrect usage of 'this' in the constructor of an immutable type</value>
  </data>
  <data name="IMM005Title" xml:space="preserve">
    <value>'This' should not be passed out of the constructor of an immutable type</value>
  </data>
  <data name="IMM006Description" xml:space="preserve">
    <value>The base type of an immutable type must be 'object' or immutable</value>
  </data>
  <data name="IMM006MessageFormat" xml:space="preserve">
    <value>Type '{0}' base type must be 'object' or immutable</value>
  </data>
  <data name="IMM006Title" xml:space="preserve">
    <value>The base type of an immutable type must be 'object' or immutable</value>
  </data>
  <data name="IMM007Description" xml:space="preserve">
    <value>Types derived from an immutable type must be immutable</value>
  </data>
  <data name="IMM007MessageFormat" xml:space="preserve">
    <value>Type '{0}' must be immutable because it derives from '{1}'</value>
  </data>
  <data name="IMM007Title" xml:space="preserve">
    <value>Types derived from an immutable type must be immutable</value>
  </data>
  <data name="IMM008Description" xml:space="preserve">
    <value>'This' should not be passed out of an init only property method of an immutable type</value>
  </data>
  <data name="IMM008MessageFormat" xml:space="preserve">
    <value>Possibly incorrect usage of 'this' in an init only property method of an immutable type</value>
  </data>
  <data name="IMM008Title" xml:space="preserve">
    <value>'This' should not be passed out of an init only property method of an immutable type</value>
  </data>
</root>